<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Meadow.DebugSol.Generated</name>
    </assembly>
    <members>
        <member name="T:Meadow.DebugSol.Generated.FlashLoanSimpleReceiverBase">
            <summary>From file @aave/core-v3/contracts/flashloan/base/FlashLoanSimpleReceiverBase.sol<para/> <para/>FlashLoanSimpleReceiverBase <para/>Notice: Base contract to develop a flashloan-receiver contract.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.FlashLoanSimpleReceiverBase.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>FlashLoanSimpleReceiverBase <para/>Notice: Base contract to develop a flashloan-receiver contract. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.FlashLoanSimpleReceiverBase.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>FlashLoanSimpleReceiverBase <para/>Notice: Base contract to develop a flashloan-receiver contract. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.FlashLoanSimpleReceiverBase.ADDRESSES_PROVIDER">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.FlashLoanSimpleReceiverBase.POOL">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.FlashLoanSimpleReceiverBase.executeOperation(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>Ensure that the contract can return the debt + premium, e.g., has      enough funds to repay and has approved the Pool to pull the total amount <para/>Notice: Executes an operation after receiving the flash-borrowed asset <para/>Returns <c>bool</c></summary>
            <param name="asset"><c>address</c>: The address of the flash-borrowed asset</param>
            <param name="amount"><c>uint256</c>: The amount of the flash-borrowed asset</param>
            <param name="premium"><c>uint256</c>: The fee of the flash-borrowed asset</param>
            <param name="initiator"><c>address</c>: The address of the flashloan initiator</param>
            <param name="@params"><c>bytes</c>: The byte-encoded params passed when initiating the flashloan</param>
        </member>
        <member name="P:Meadow.DebugSol.Generated.FlashLoanSimpleReceiverBase.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.IFlashLoanSimpleReceiver">
            <summary>From file @aave/core-v3/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol<para/> <para/>IFlashLoanSimpleReceiver <para/>Implement this interface to develop a flashloan-compatible flashLoanReceiver contract <para/>Notice: Defines the basic interface of a flashloan-receiver contract.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IFlashLoanSimpleReceiver.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>IFlashLoanSimpleReceiver <para/>Implement this interface to develop a flashloan-compatible flashLoanReceiver contract <para/>Notice: Defines the basic interface of a flashloan-receiver contract. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IFlashLoanSimpleReceiver.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>IFlashLoanSimpleReceiver <para/>Implement this interface to develop a flashloan-compatible flashLoanReceiver contract <para/>Notice: Defines the basic interface of a flashloan-receiver contract. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IFlashLoanSimpleReceiver.ADDRESSES_PROVIDER">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IFlashLoanSimpleReceiver.POOL">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IFlashLoanSimpleReceiver.executeOperation(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>Ensure that the contract can return the debt + premium, e.g., has      enough funds to repay and has approved the Pool to pull the total amount <para/>Notice: Executes an operation after receiving the flash-borrowed asset <para/>Returns <c>bool</c></summary>
            <param name="asset"><c>address</c>: The address of the flash-borrowed asset</param>
            <param name="amount"><c>uint256</c>: The amount of the flash-borrowed asset</param>
            <param name="premium"><c>uint256</c>: The fee of the flash-borrowed asset</param>
            <param name="initiator"><c>address</c>: The address of the flashloan initiator</param>
            <param name="@params"><c>bytes</c>: The byte-encoded params passed when initiating the flashloan</param>
        </member>
        <member name="P:Meadow.DebugSol.Generated.IFlashLoanSimpleReceiver.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.IPool">
            <summary>From file @aave/core-v3/contracts/interfaces/IPool.sol<para/> <para/>IPool <para/>Notice: Defines the basic interface for an Aave Pool.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>IPool <para/>Notice: Defines the basic interface for an Aave Pool. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>IPool <para/>Notice: Defines the basic interface for an Aave Pool. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.ADDRESSES_PROVIDER">
            <summary> <para/>Notice: Returns the PoolAddressesProvider connected to this contract <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.BRIDGE_PROTOCOL_FEE">
            <summary> <para/>Notice: Returns the part of the bridge fees sent to protocol <para/>Returns <c>uint256</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.FLASHLOAN_PREMIUM_TOTAL">
            <summary> <para/>Notice: Returns the total fee on flash loans <para/>Returns <c>uint128</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.FLASHLOAN_PREMIUM_TO_PROTOCOL">
            <summary> <para/>Notice: Returns the part of the flashloan fees sent to protocol <para/>Returns <c>uint128</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.MAX_NUMBER_RESERVES">
            <summary> <para/>Notice: Returns the maximum number of reserves supported to be listed in this Pool <para/>Returns <c>uint16</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.MAX_STABLE_RATE_BORROW_SIZE_PERCENT">
            <summary> <para/>Notice: Returns the percentage of available liquidity that can be borrowed at once at stable rate <para/>Returns <c>uint256</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.backUnbacked(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Notice: Back the current unbacked underlying with `amount` and pay `fee`. <para/>Returns <c>uint256</c></summary>
            <param name="asset"><c>address</c>: The address of the underlying asset to back</param>
            <param name="amount"><c>uint256</c>: The amount to back</param>
            <param name="fee"><c>uint256</c>: The amount paid in fees</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.borrow(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.UInt16,Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already supplied enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset to borrow</param>
            <param name="amount"><c>uint256</c>: The amount to be borrowed</param>
            <param name="interestRateMode"><c>uint256</c>: The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable</param>
            <param name="referralCode"><c>uint16</c>: The code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man</param>
            <param name="onBehalfOf"><c>address</c>: The address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.configureEModeCategory(System.Byte,Meadow.Core.EthTypes.Address)">
            <summary></summary>
            <param name="id"><c>uint8</c></param>
            <param name="config"><c>address</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.deposit(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,System.UInt16)">
            <summary>Deprecated: Use the `supply` function instead <para/>Notice: Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset to supply</param>
            <param name="amount"><c>uint256</c>: The amount to be supplied</param>
            <param name="onBehalfOf"><c>address</c>: The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet</param>
            <param name="referralCode"><c>uint16</c>: Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.dropReserve(Meadow.Core.EthTypes.Address)">
            <summary>Only callable by the PoolConfigurator contract <para/>Notice: Drop a reserve</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset of the reserve</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.finalizeTransfer(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary>Only callable by the overlying aToken of the `asset` <para/>Notice: Validates and finalizes an aToken transfer</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset of the aToken</param>
            <param name="from"><c>address</c>: The user from which the aTokens are transferred</param>
            <param name="to"><c>address</c>: The user receiving the aTokens</param>
            <param name="amount"><c>uint256</c>: The amount being transferred/withdrawn</param>
            <param name="balanceFromBefore"><c>uint256</c>: The aToken balance of the `from` user before the transfer</param>
            <param name="balanceToBefore"><c>uint256</c>: The aToken balance of the `to` user before the transfer</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.flashLoan(Meadow.Core.EthTypes.Address,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.UInt256},System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.UInt256},Meadow.Core.EthTypes.Address,System.Collections.Generic.IEnumerable{System.Byte},System.UInt16)">
            <summary>IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://docs.aave.com/developers/ <para/>Notice: Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned.</summary>
            <param name="receiverAddress"><c>address</c>: The address of the contract receiving the funds, implementing IFlashLoanReceiver interface</param>
            <param name="assets"><c>address[]</c>: The addresses of the assets being flash-borrowed</param>
            <param name="amounts"><c>uint256[]</c>: The amounts of the assets being flash-borrowed</param>
            <param name="interestRateModes"><c>uint256[]</c>: Types of the debt to open if the flash loan is not returned:   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address</param>
            <param name="onBehalfOf"><c>address</c>: The address  that will receive the debt in the case of using on `modes` 1 or 2</param>
            <param name="@params"><c>bytes</c>: Variadic packed params to pass to the receiver as extra information</param>
            <param name="referralCode"><c>uint16</c>: The code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.flashLoanSimple(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{System.Byte},System.UInt16)">
            <summary>IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://docs.aave.com/developers/ <para/>Notice: Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned.</summary>
            <param name="receiverAddress"><c>address</c>: The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface</param>
            <param name="asset"><c>address</c>: The address of the asset being flash-borrowed</param>
            <param name="amount"><c>uint256</c>: The amount of the asset being flash-borrowed</param>
            <param name="@params"><c>bytes</c>: Variadic packed params to pass to the receiver as extra information</param>
            <param name="referralCode"><c>uint16</c>: The code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getConfiguration(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Returns the configuration of the reserve <para/>Returns <c>tuple</c></summary>
            <param name="asset"><c>address</c>: The address of the underlying asset of the reserve</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getEModeCategoryData(System.Byte)">
            <summary> <para/>Notice: Returns the data of an eMode category <para/>Returns <c>tuple</c></summary>
            <param name="id"><c>uint8</c>: The id of the category</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getReserveAddressById(System.UInt16)">
            <summary> <para/>Notice: Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct <para/>Returns <c>address</c></summary>
            <param name="id"><c>uint16</c>: The id of the reserve as stored in the DataTypes.ReserveData struct</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getReserveData(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Returns the state and configuration of the reserve <para/>Returns <c>tuple</c></summary>
            <param name="asset"><c>address</c>: The address of the underlying asset of the reserve</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getReserveNormalizedIncome(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Returns the normalized income of the reserve <para/>Returns <c>uint256</c></summary>
            <param name="asset"><c>address</c>: The address of the underlying asset of the reserve</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getReserveNormalizedVariableDebt(Meadow.Core.EthTypes.Address)">
            <summary>WARNING: This function is intended to be used primarily by the protocol itself to get a "dynamic" variable index based on time, current stored index and virtual rate at the current moment (approx. a borrower would get if opening a position). This means that is always used in combination with variable debt supply/balances. If using this function externally, consider that is possible to have an increasing normalized variable debt that is not equivalent to how the variable debt index would be updated in storage (e.g. only updates with non-zero variable debt supply) <para/>Notice: Returns the normalized variable debt per unit of asset <para/>Returns <c>uint256</c></summary>
            <param name="asset"><c>address</c>: The address of the underlying asset of the reserve</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getReservesList">
            <summary>It does not include dropped reserves <para/>Notice: Returns the list of the underlying assets of all the initialized reserves <para/>Returns <c>address[]</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getUserAccountData(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Returns the user account data across all the reserves <para/>Returns <c>uint256,uint256,uint256,uint256,uint256,uint256</c></summary>
            <param name="user"><c>address</c>: The address of the user</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getUserConfiguration(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Returns the configuration of the user across all the reserves <para/>Returns <c>tuple</c></summary>
            <param name="user"><c>address</c>: The user address</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.getUserEMode(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Returns the eMode the user is using <para/>Returns <c>uint256</c></summary>
            <param name="user"><c>address</c>: The address of the user</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.initReserve(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address)">
            <summary>Only callable by the PoolConfigurator contract <para/>Notice: Initializes a reserve, activating it, assigning an aToken and debt tokens and an interest rate strategy</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset of the reserve</param>
            <param name="aTokenAddress"><c>address</c>: The address of the aToken that will be assigned to the reserve</param>
            <param name="stableDebtAddress"><c>address</c>: The address of the StableDebtToken that will be assigned to the reserve</param>
            <param name="variableDebtAddress"><c>address</c>: The address of the VariableDebtToken that will be assigned to the reserve</param>
            <param name="interestRateStrategyAddress"><c>address</c>: The address of the interest rate strategy contract</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.liquidationCall(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,System.Boolean)">
            <summary> <para/>Notice: Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk</summary>
            <param name="collateralAsset"><c>address</c>: The address of the underlying asset used as collateral, to receive as result of the liquidation</param>
            <param name="debtAsset"><c>address</c>: The address of the underlying borrowed asset to be repaid with the liquidation</param>
            <param name="user"><c>address</c>: The address of the borrower getting liquidated</param>
            <param name="debtToCover"><c>uint256</c>: The debt amount of borrowed `asset` the liquidator wants to cover</param>
            <param name="receiveAToken"><c>bool</c>: True if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.mintToTreasury(System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address})">
            <summary> <para/>Notice: Mints the assets accrued through the reserve factor to the treasury in the form of aTokens</summary>
            <param name="assets"><c>address[]</c>: The list of reserves for which the minting needs to be executed</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.mintUnbacked(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,System.UInt16)">
            <summary> <para/>Notice: Mints an `amount` of aTokens to the `onBehalfOf`</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset to mint</param>
            <param name="amount"><c>uint256</c>: The amount to mint</param>
            <param name="onBehalfOf"><c>address</c>: The address that will receive the aTokens</param>
            <param name="referralCode"><c>uint16</c>: Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.rebalanceStableBorrowRate(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Rebalances the stable interest rate of a user to the current stable rate defined on the reserve. - Users can be rebalanced if the following conditions are satisfied:     1. Usage ratio is above 95%     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too        much has been borrowed at a stable rate and suppliers are not earning enough</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset borrowed</param>
            <param name="user"><c>address</c>: The address of the user to be rebalanced</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.repay(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address <para/>Returns <c>uint256</c></summary>
            <param name="asset"><c>address</c>: The address of the borrowed underlying asset previously borrowed</param>
            <param name="amount"><c>uint256</c>: The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`</param>
            <param name="interestRateMode"><c>uint256</c>: The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable</param>
            <param name="onBehalfOf"><c>address</c>: The address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.repayWithATokens(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary>Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken balance is not enough to cover the whole debt <para/>Notice: Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the equivalent debt tokens - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens <para/>Returns <c>uint256</c></summary>
            <param name="asset"><c>address</c>: The address of the borrowed underlying asset previously borrowed</param>
            <param name="amount"><c>uint256</c>: The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`</param>
            <param name="interestRateMode"><c>uint256</c>: The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.repayWithPermit(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,System.Byte,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary> <para/>Notice: Repay with transfer approval of asset to be repaid done via permit function see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713 <para/>Returns <c>uint256</c></summary>
            <param name="asset"><c>address</c>: The address of the borrowed underlying asset previously borrowed</param>
            <param name="amount"><c>uint256</c>: The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`</param>
            <param name="interestRateMode"><c>uint256</c>: The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable</param>
            <param name="onBehalfOf"><c>address</c>: Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed</param>
            <param name="deadline"><c>uint256</c>: The deadline timestamp that the permit is valid</param>
            <param name="permitV"><c>uint8</c>: The V parameter of ERC712 permit sig</param>
            <param name="permitR"><c>bytes32</c>: The R parameter of ERC712 permit sig</param>
            <param name="permitS"><c>bytes32</c>: The S parameter of ERC712 permit sig</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.rescueTokens(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Notice: Rescue and transfer tokens locked in this contract</summary>
            <param name="token"><c>address</c>: The address of the token</param>
            <param name="to"><c>address</c>: The address of the recipient</param>
            <param name="amount"><c>uint256</c>: The amount of token to transfer</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.resetIsolationModeTotalDebt(Meadow.Core.EthTypes.Address)">
            <summary>It requires the given asset has zero debt ceiling <para/>Notice: Resets the isolation mode total debt of the given asset to zero</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset to reset the isolationModeTotalDebt</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.setConfiguration(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address)">
            <summary></summary>
            <param name="asset"><c>address</c></param>
            <param name="configuration"><c>address</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.setReserveInterestRateStrategyAddress(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address)">
            <summary>Only callable by the PoolConfigurator contract <para/>Notice: Updates the address of the interest rate strategy contract</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset of the reserve</param>
            <param name="rateStrategyAddress"><c>address</c>: The address of the interest rate strategy contract</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.setUserEMode(System.Byte)">
            <summary> <para/>Notice: Allows a user to use the protocol in eMode</summary>
            <param name="categoryId"><c>uint8</c>: The id of the category</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.setUserUseReserveAsCollateral(Meadow.Core.EthTypes.Address,System.Boolean)">
            <summary> <para/>Notice: Allows suppliers to enable/disable a specific supplied asset as collateral</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset supplied</param>
            <param name="useAsCollateral"><c>bool</c>: True if the user wants to use the supply as collateral, false otherwise</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.supply(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,System.UInt16)">
            <summary> <para/>Notice: Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset to supply</param>
            <param name="amount"><c>uint256</c>: The amount to be supplied</param>
            <param name="onBehalfOf"><c>address</c>: The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet</param>
            <param name="referralCode"><c>uint16</c>: Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.supplyWithPermit(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,System.UInt16,Meadow.Core.EthTypes.UInt256,System.Byte,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary> <para/>Notice: Supply with transfer approval of asset to be supplied done via permit function see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset to supply</param>
            <param name="amount"><c>uint256</c>: The amount to be supplied</param>
            <param name="onBehalfOf"><c>address</c>: The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet</param>
            <param name="referralCode"><c>uint16</c>: Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man</param>
            <param name="deadline"><c>uint256</c>: The deadline timestamp that the permit is valid</param>
            <param name="permitV"><c>uint8</c>: The V parameter of ERC712 permit sig</param>
            <param name="permitR"><c>bytes32</c>: The R parameter of ERC712 permit sig</param>
            <param name="permitS"><c>bytes32</c>: The S parameter of ERC712 permit sig</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.swapBorrowRateMode(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Notice: Allows a borrower to swap his debt between stable and variable mode, or vice versa</summary>
            <param name="asset"><c>address</c>: The address of the underlying asset borrowed</param>
            <param name="interestRateMode"><c>uint256</c>: The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.updateBridgeProtocolFee(Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Notice: Updates the protocol fee on the bridging</summary>
            <param name="bridgeProtocolFee"><c>uint256</c>: The part of the premium sent to the protocol treasury</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.updateFlashloanPremiums(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary>The total premium is calculated on the total borrowed amountThe premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`Only callable by the PoolConfigurator contract <para/>Notice: Updates flash loan premiums. Flash loan premium consists of two parts: - A part is sent to aToken holders as extra, one time accumulated interest - A part is collected by the protocol treasury</summary>
            <param name="flashLoanPremiumTotal"><c>uint128</c>: The total premium, expressed in bps</param>
            <param name="flashLoanPremiumToProtocol"><c>uint128</c>: The part of the premium sent to the protocol treasury, expressed in bps</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPool.withdraw(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC <para/>Returns <c>uint256</c></summary>
            <param name="asset"><c>address</c>: The address of the underlying asset to withdraw</param>
            <param name="amount"><c>uint256</c>: The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance</param>
            <param name="to"><c>address</c>: The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet</param>
        </member>
        <member name="P:Meadow.DebugSol.Generated.IPool.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.IPoolAddressesProvider">
            <summary>From file @aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol<para/> <para/>IPoolAddressesProvider <para/>Notice: Defines the basic interface for a Pool Addresses Provider.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>IPoolAddressesProvider <para/>Notice: Defines the basic interface for a Pool Addresses Provider. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>IPoolAddressesProvider <para/>Notice: Defines the basic interface for a Pool Addresses Provider. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.getACLAdmin">
            <summary> <para/>Notice: Returns the address of the ACL admin. <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.getACLManager">
            <summary> <para/>Notice: Returns the address of the ACL manager. <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.getAddress(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>The returned address might be an EOA or a contract, potentially proxiedIt returns ZERO if there is no registered address with the given id <para/>Notice: Returns an address by its identifier. <para/>Returns <c>address</c></summary>
            <param name="id"><c>bytes32</c>: The id</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.getMarketId">
            <summary> <para/>Notice: Returns the id of the Aave market to which this contract points to. <para/>Returns <c>string</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.getPool">
            <summary> <para/>Notice: Returns the address of the Pool proxy. <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.getPoolConfigurator">
            <summary> <para/>Notice: Returns the address of the PoolConfigurator proxy. <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.getPoolDataProvider">
            <summary> <para/>Notice: Returns the address of the data provider. <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.getPriceOracle">
            <summary> <para/>Notice: Returns the address of the price oracle. <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.getPriceOracleSentinel">
            <summary> <para/>Notice: Returns the address of the price oracle sentinel. <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setACLAdmin(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Updates the address of the ACL admin.</summary>
            <param name="newAclAdmin"><c>address</c>: The address of the new ACL admin</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setACLManager(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Updates the address of the ACL manager.</summary>
            <param name="newAclManager"><c>address</c>: The address of the new ACLManager</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setAddress(System.Collections.Generic.IEnumerable{System.Byte},Meadow.Core.EthTypes.Address)">
            <summary>IMPORTANT Use this function carefully, as it will do a hard replacement <para/>Notice: Sets an address for an id replacing the address saved in the addresses map.</summary>
            <param name="id"><c>bytes32</c>: The id</param>
            <param name="newAddress"><c>address</c>: The address to set</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setAddressAsProxy(System.Collections.Generic.IEnumerable{System.Byte},Meadow.Core.EthTypes.Address)">
            <summary>IMPORTANT Use this function carefully, only for ids that don't have an explicit setter function, in order to avoid unexpected consequences <para/>Notice: General function to update the implementation of a proxy registered with certain `id`. If there is no proxy registered, it will instantiate one and set as implementation the `newImplementationAddress`.</summary>
            <param name="id"><c>bytes32</c>: The id</param>
            <param name="newImplementationAddress"><c>address</c>: The address of the new implementation</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setMarketId(System.String)">
            <summary>This can be used to create an onchain registry of PoolAddressesProviders to identify and validate multiple Aave markets. <para/>Notice: Associates an id with a specific PoolAddressesProvider.</summary>
            <param name="newMarketId"><c>string</c>: The market id</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setPoolConfiguratorImpl(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Updates the implementation of the PoolConfigurator, or creates a proxy setting the new `PoolConfigurator` implementation when the function is called for the first time.</summary>
            <param name="newPoolConfiguratorImpl"><c>address</c>: The new PoolConfigurator implementation</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setPoolDataProvider(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Updates the address of the data provider.</summary>
            <param name="newDataProvider"><c>address</c>: The address of the new DataProvider</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setPoolImpl(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Updates the implementation of the Pool, or creates a proxy setting the new `pool` implementation when the function is called for the first time.</summary>
            <param name="newPoolImpl"><c>address</c>: The new Pool implementation</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setPriceOracle(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Updates the address of the price oracle.</summary>
            <param name="newPriceOracle"><c>address</c>: The address of the new PriceOracle</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IPoolAddressesProvider.setPriceOracleSentinel(Meadow.Core.EthTypes.Address)">
            <summary> <para/>Notice: Updates the address of the price oracle sentinel.</summary>
            <param name="newPriceOracleSentinel"><c>address</c>: The address of the new PriceOracleSentinel</param>
        </member>
        <member name="P:Meadow.DebugSol.Generated.IPoolAddressesProvider.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.DataTypes">
            <summary>From file @aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol<para/></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.DataTypes.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.DataTypes.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="P:Meadow.DebugSol.Generated.DataTypes.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.Ownable">
            <summary>From file @openzeppelin/contracts/access/Ownable.sol<para/> <para/>Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.Ownable.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.Ownable.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.Ownable.owner">
            <summary>Returns the address of the current owner. <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.Ownable.renounceOwnership">
            <summary>Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.Ownable.transferOwnership(Meadow.Core.EthTypes.Address)">
            <summary>Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.</summary>
            <param name="newOwner"><c>address</c></param>
        </member>
        <member name="P:Meadow.DebugSol.Generated.Ownable.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.IERC20">
            <summary>From file @openzeppelin/contracts/token/ERC20/IERC20.sol<para/> <para/>Interface of the ERC20 standard as defined in the EIP.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IERC20.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>Interface of the ERC20 standard as defined in the EIP. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IERC20.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>Interface of the ERC20 standard as defined in the EIP. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IERC20.allowance(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address)">
            <summary>Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called. <para/>Returns <c>uint256</c></summary>
            <param name="owner"><c>address</c></param>
            <param name="spender"><c>address</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IERC20.approve(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary>Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event. <para/>Returns <c>bool</c></summary>
            <param name="spender"><c>address</c></param>
            <param name="amount"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IERC20.balanceOf(Meadow.Core.EthTypes.Address)">
            <summary>Returns the amount of tokens owned by `account`. <para/>Returns <c>uint256</c></summary>
            <param name="account"><c>address</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IERC20.totalSupply">
            <summary>Returns the amount of tokens in existence. <para/>Returns <c>uint256</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IERC20.transfer(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary>Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. <para/>Returns <c>bool</c></summary>
            <param name="to"><c>address</c></param>
            <param name="amount"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IERC20.transferFrom(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary>Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event. <para/>Returns <c>bool</c></summary>
            <param name="from"><c>address</c></param>
            <param name="to"><c>address</c></param>
            <param name="amount"><c>uint256</c></param>
        </member>
        <member name="P:Meadow.DebugSol.Generated.IERC20.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.Context">
            <summary>From file @openzeppelin/contracts/utils/Context.sol<para/> <para/>Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.Context.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.Context.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts. <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="P:Meadow.DebugSol.Generated.Context.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.IUniswapV2Router01">
            <summary>From file @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol<para/></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.WETH">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.addLiquidity(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256,uint256,uint256</c></summary>
            <param name="tokenA"><c>address</c></param>
            <param name="tokenB"><c>address</c></param>
            <param name="amountADesired"><c>uint256</c></param>
            <param name="amountBDesired"><c>uint256</c></param>
            <param name="amountAMin"><c>uint256</c></param>
            <param name="amountBMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.addLiquidityETH(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256,uint256,uint256</c></summary>
            <param name="token"><c>address</c></param>
            <param name="amountTokenDesired"><c>uint256</c></param>
            <param name="amountTokenMin"><c>uint256</c></param>
            <param name="amountETHMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.factory">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.getAmountIn(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="reserveIn"><c>uint256</c></param>
            <param name="reserveOut"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.getAmountOut(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256</c></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="reserveIn"><c>uint256</c></param>
            <param name="reserveOut"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.getAmountsIn(Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address})">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.getAmountsOut(Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address})">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.quote(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256</c></summary>
            <param name="amountA"><c>uint256</c></param>
            <param name="reserveA"><c>uint256</c></param>
            <param name="reserveB"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.removeLiquidity(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256,uint256</c></summary>
            <param name="tokenA"><c>address</c></param>
            <param name="tokenB"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountAMin"><c>uint256</c></param>
            <param name="amountBMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.removeLiquidityETH(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256,uint256</c></summary>
            <param name="token"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountTokenMin"><c>uint256</c></param>
            <param name="amountETHMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.removeLiquidityETHWithPermit(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,System.Boolean,System.Byte,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary> <para/>Returns <c>uint256,uint256</c></summary>
            <param name="token"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountTokenMin"><c>uint256</c></param>
            <param name="amountETHMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
            <param name="approveMax"><c>bool</c></param>
            <param name="v"><c>uint8</c></param>
            <param name="r"><c>bytes32</c></param>
            <param name="s"><c>bytes32</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.removeLiquidityWithPermit(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,System.Boolean,System.Byte,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary> <para/>Returns <c>uint256,uint256</c></summary>
            <param name="tokenA"><c>address</c></param>
            <param name="tokenB"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountAMin"><c>uint256</c></param>
            <param name="amountBMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
            <param name="approveMax"><c>bool</c></param>
            <param name="v"><c>uint8</c></param>
            <param name="r"><c>bytes32</c></param>
            <param name="s"><c>bytes32</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.swapETHForExactTokens(Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.swapExactETHForTokens(Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOutMin"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.swapExactTokensForETH(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="amountOutMin"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.swapExactTokensForTokens(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="amountOutMin"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.swapTokensForExactETH(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="amountInMax"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router01.swapTokensForExactTokens(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="amountInMax"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="P:Meadow.DebugSol.Generated.IUniswapV2Router01.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.IUniswapV2Router02">
            <summary>From file @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol<para/></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.WETH">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.addLiquidity(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256,uint256,uint256</c></summary>
            <param name="tokenA"><c>address</c></param>
            <param name="tokenB"><c>address</c></param>
            <param name="amountADesired"><c>uint256</c></param>
            <param name="amountBDesired"><c>uint256</c></param>
            <param name="amountAMin"><c>uint256</c></param>
            <param name="amountBMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.addLiquidityETH(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256,uint256,uint256</c></summary>
            <param name="token"><c>address</c></param>
            <param name="amountTokenDesired"><c>uint256</c></param>
            <param name="amountTokenMin"><c>uint256</c></param>
            <param name="amountETHMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.factory">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.getAmountIn(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="reserveIn"><c>uint256</c></param>
            <param name="reserveOut"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.getAmountOut(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256</c></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="reserveIn"><c>uint256</c></param>
            <param name="reserveOut"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.getAmountsIn(Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address})">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.getAmountsOut(Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address})">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.quote(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256</c></summary>
            <param name="amountA"><c>uint256</c></param>
            <param name="reserveA"><c>uint256</c></param>
            <param name="reserveB"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.removeLiquidity(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256,uint256</c></summary>
            <param name="tokenA"><c>address</c></param>
            <param name="tokenB"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountAMin"><c>uint256</c></param>
            <param name="amountBMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.removeLiquidityETH(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256,uint256</c></summary>
            <param name="token"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountTokenMin"><c>uint256</c></param>
            <param name="amountETHMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.removeLiquidityETHSupportingFeeOnTransferTokens(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256</c></summary>
            <param name="token"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountTokenMin"><c>uint256</c></param>
            <param name="amountETHMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.removeLiquidityETHWithPermit(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,System.Boolean,System.Byte,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary> <para/>Returns <c>uint256,uint256</c></summary>
            <param name="token"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountTokenMin"><c>uint256</c></param>
            <param name="amountETHMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
            <param name="approveMax"><c>bool</c></param>
            <param name="v"><c>uint8</c></param>
            <param name="r"><c>bytes32</c></param>
            <param name="s"><c>bytes32</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,System.Boolean,System.Byte,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary> <para/>Returns <c>uint256</c></summary>
            <param name="token"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountTokenMin"><c>uint256</c></param>
            <param name="amountETHMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
            <param name="approveMax"><c>bool</c></param>
            <param name="v"><c>uint8</c></param>
            <param name="r"><c>bytes32</c></param>
            <param name="s"><c>bytes32</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.removeLiquidityWithPermit(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,System.Boolean,System.Byte,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Byte})">
            <summary> <para/>Returns <c>uint256,uint256</c></summary>
            <param name="tokenA"><c>address</c></param>
            <param name="tokenB"><c>address</c></param>
            <param name="liquidity"><c>uint256</c></param>
            <param name="amountAMin"><c>uint256</c></param>
            <param name="amountBMin"><c>uint256</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
            <param name="approveMax"><c>bool</c></param>
            <param name="v"><c>uint8</c></param>
            <param name="r"><c>bytes32</c></param>
            <param name="s"><c>bytes32</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.swapETHForExactTokens(Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.swapExactETHForTokens(Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOutMin"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.swapExactETHForTokensSupportingFeeOnTransferTokens(Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary></summary>
            <param name="amountOutMin"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.swapExactTokensForETH(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="amountOutMin"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="amountOutMin"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.swapExactTokensForTokens(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="amountOutMin"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.swapExactTokensForTokensSupportingFeeOnTransferTokens(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary></summary>
            <param name="amountIn"><c>uint256</c></param>
            <param name="amountOutMin"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.swapTokensForExactETH(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="amountInMax"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.IUniswapV2Router02.swapTokensForExactTokens(Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,System.Collections.Generic.IEnumerable{Meadow.Core.EthTypes.Address},Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256)">
            <summary> <para/>Returns <c>uint256[]</c></summary>
            <param name="amountOut"><c>uint256</c></param>
            <param name="amountInMax"><c>uint256</c></param>
            <param name="path"><c>address[]</c></param>
            <param name="to"><c>address</c></param>
            <param name="deadline"><c>uint256</c></param>
        </member>
        <member name="P:Meadow.DebugSol.Generated.IUniswapV2Router02.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.DbgEntry">
            <summary>From file Arbitrage.t.sol<para/></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.DbgEntry.Deploy(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.DbgEntry.New(Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>
            </summary>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="P:Meadow.DebugSol.Generated.DbgEntry.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
        <member name="T:Meadow.DebugSol.Generated.ArbitrageBot">
            <summary>From file contracts/Arbitrage.sol<para/> <para/>Notice: Notes ----------------------------------------------------------------------------------------- Mainnet:         "0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e" Sepolia TestNet: "0x012bAC54348C0E635dCAc9D5FB99f06F24136C9A" ----------------------------------------------------------------------------------------- 1. To swap testnet coins, go to https://app.uniswap.org/, settings, change to test mode.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.ArbitrageBot.Deploy(Meadow.Core.EthTypes.Address,Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>Notice: Notes ----------------------------------------------------------------------------------------- Mainnet:         "0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e" Sepolia TestNet: "0x012bAC54348C0E635dCAc9D5FB99f06F24136C9A" ----------------------------------------------------------------------------------------- 1. To swap testnet coins, go to https://app.uniswap.org/, settings, change to test mode. <para/>
            </summary>
            <param name="_addressProvider"><c>address</c></param>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.ArbitrageBot.New(Meadow.Core.EthTypes.Address,Meadow.JsonRpc.Client.IJsonRpcClient,Meadow.JsonRpc.Types.TransactionParams,System.Nullable{Meadow.Core.EthTypes.Address})">
            <summary>
            Deploys the contract.  <para/>Notice: Notes ----------------------------------------------------------------------------------------- Mainnet:         "0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e" Sepolia TestNet: "0x012bAC54348C0E635dCAc9D5FB99f06F24136C9A" ----------------------------------------------------------------------------------------- 1. To swap testnet coins, go to https://app.uniswap.org/, settings, change to test mode. <para/>
            </summary>
            <param name="_addressProvider"><c>address</c></param>
            <param name="rpcClient">The RPC client to be used for this contract instance.</param>
            <param name="defaultFromAccount">If null then the first account returned by eth_accounts will be used.</param>
            <returns>An contract instance pointed at the deployed contract address.</returns>
        </member>
        <member name="M:Meadow.DebugSol.Generated.ArbitrageBot.ADDRESSES_PROVIDER">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.ArbitrageBot.POOL">
            <summary> <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.ArbitrageBot.executeOperation(Meadow.Core.EthTypes.Address,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.UInt256,Meadow.Core.EthTypes.Address,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>Ensure that the contract can return the debt + premium, e.g., has      enough funds to repay and has approved the Pool to pull the total amount <para/>Notice: Executes an operation after receiving the flash-borrowed asset <para/>Returns <c>bool</c></summary>
            <param name="asset"><c>address</c>: The address of the flash-borrowed asset</param>
            <param name="amount"><c>uint256</c>: The amount of the flash-borrowed asset</param>
            <param name="premium"><c>uint256</c>: The fee of the flash-borrowed asset</param>
            <param name="initiator"><c>address</c>: The address of the flashloan initiator</param>
            <param name="@params"><c>bytes</c>: The byte-encoded params passed when initiating the flashloan</param>
        </member>
        <member name="M:Meadow.DebugSol.Generated.ArbitrageBot.owner">
            <summary>Returns the address of the current owner. <para/>Returns <c>address</c></summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.ArbitrageBot.renounceOwnership">
            <summary>Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.</summary>
        </member>
        <member name="M:Meadow.DebugSol.Generated.ArbitrageBot.transferOwnership(Meadow.Core.EthTypes.Address)">
            <summary>Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.</summary>
            <param name="newOwner"><c>address</c></param>
        </member>
        <member name="P:Meadow.DebugSol.Generated.ArbitrageBot.FallbackFunction">
            <summary>The contract fallback function. <para/></summary>
        </member>
    </members>
</doc>
